// Post - Add Job Seeker
app.post('/api/jobseeker', async(req, res) => {
    try {
        const jobseeker = await JobSeeker.create(req.body);
        res.status(200).send("Successfully Added a Job Seeker.");
    } catch (error) {
        res.status(500).send("Something went wrong.");
    };
});

// Get - Fetch All Job Seekers
app.get('/api/jobseeker', async(req, res) => {
    try {
        const jobseekers = await JobSeeker.find({});
        res.status(200).json(jobseekers);
    } catch (error) {
        res.status(500).send("Something went wrong.");
    };
});

// Get - Fetch Specific Job Seeker
app.get('/api/jobseeker/:id', async(req, res) => {
    try {
        const { id } = req.params;
        const jobseeker = await JobSeeker.findById(id);
        res.status(200).json(jobseeker);
    } catch (error) {
        res.status(500).send("Something went wrong.");
    };
});

// Patch - Update Details of a Job Seeker
app.patch('/api/jobseeker/:id', async(req,res) =>{
    try {
        const { id } = req.params;
        const jobseeker = await JobSeeker.findByIdAndUpdate(id, req.body);

        if (!jobseeker) {
            return res.status(404).send("User does not exist.")
        }

        const updatedjobseeker = await JobSeeker.findById(id);
        res.status(200).json(updatedjobseeker);

    } catch (error) {
        res.status(500).send("Something went wrong.");
    }
});

// Delete - Delete a Job Seeker
app.delete('/api/jobseeker/:id', async(req,res) =>{
    try {
        const { id } = req.params;
        const jobseeker = await JobSeeker.findByIdAndDelete(id);

        if (!jobseeker) {
            return res.status(404).send("User does not exist.")
        }
        res.status(200).send("User deleted.")
    } catch (error) {
        res.status(500).send("Something went wrong.");
    }
});

// Optional code snippet to allow direct login after registration.
const token = createToken(user._id);
res.cookie('userToken', token, { httpOnly: true, maxAge: maxAge * 1000});

// Fetching Token from Browser cookie
const token = req.cookies.TOKEN_VAR_NAME

req.userID = user._id.toString();
    req.userName = user.name;